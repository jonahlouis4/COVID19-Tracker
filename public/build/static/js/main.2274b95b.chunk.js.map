{"version":3,"sources":["components/TopCountries.js","components/DisplayCard.js","components/Global.js","components/ByCountry.js","components/SummaryStat.js","components/Countries.js","App.js","serviceWorker.js","index.js"],"names":["Option","Select","TopCountries","COUNTRIES","useState","data","setData","useEffect","chartData","sortType","sort","a","b","parseInt","Cases","TotalDeaths","TotalRecovered","countries_cases","Country","countries_deaths","countries_recoveries","getData","autoChart","document","getElementById","toolbar","development","className","value","onChange","e","style","width","span","id","DisplayCard","title","xs","sm","md","lg","xl","hoverable","GLOBAL_QUERY","gql","loadingIcon","fontSize","spin","Text","Typography","Global","titles","useQuery","loading","error","justify","indicator","type","summary","NewConfirmed","TotalConfirmed","NewDeaths","NewRecovered","gutter","ByCountry","new_cases","total_cases","new_deaths","total_deaths","new_recoveries","total_recoveries","COUNTRY_SELECT","x","length","NewCases","RecentDeaths","SelectStat","dataSelect","setSelect","options","push","key","DisplayData","showSearch","optionFilterProp","filterOption","input","option","children","toLowerCase","indexOf","COUNTRY_QUERY","Countries","COUNTIRES_COPY","rtnValue","TOP_COUNTRY_RTN","message","ComponentDisplay","props","SummaryStat","map","ID","Date","addCountry","slice","Title","client","ApolloClient","uri","cache","InMemoryCache","App","level","href","target","rel","color","float","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.2274b95b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Select from 'antd/lib/select'\r\nimport Col from 'antd/lib/col'\r\nimport { autoChart } from '@antv/chart-advisor';\r\n\r\nconst { Option } = Select;\r\n\r\n/**\r\n * Displays a graph of the selected options \r\n * @param {Array} COUNTRIES - Array containing the QUERY information of <Countries>\r\n * @returns \r\n */\r\nconst TopCountries = ({COUNTRIES}) => {\r\n    /** Holds the current 'Select' tag */\r\n    const [data, setData] = useState(\"Sort by most cases\");\r\n\r\n    /** Sorts the COUNTRIES array by most cases */\r\n    const sortByCases = () => {\r\n        COUNTRIES.sort((a, b) => parseInt(b.Cases) - parseInt(a.Cases));\r\n    }\r\n    /** Sorts the COUNTRIES array by most deaths */\r\n    const sortByDeaths = () => {\r\n        COUNTRIES.sort((a, b) => parseInt(b.TotalDeaths) - parseInt(a.TotalDeaths));\r\n    }\r\n    /** Sorts the COUNTRIES array by most recoveries */\r\n    const sortByRecoveries = () => {\r\n        COUNTRIES.sort((a, b) => parseInt(b.TotalRecovered) - parseInt(a.TotalRecovered));\r\n    }\r\n\r\n    useEffect(() => {\r\n        const chartData = getData(data)\r\n        autoChart(document.getElementById('column_graph'), chartData, { toolbar: false, development: false });\r\n      }, [data]);\r\n\r\n    return (\r\n        <div className=\"sorted-chart-container\">\r\n            <Select\r\n            value={data}\r\n            onChange={(e) => {\r\n                setData(e);}}\r\n            style={{ width: 225 }}\r\n            >\r\n                <Option value=\"Sort by most cases\">Sort by most cases (top 15)</Option>\r\n                <Option value=\"Sort by most deaths\">Sort by most deaths (top 15)</Option>\r\n                <Option value=\"Sort by most recoveries\">Sort by most recoveries (top 15)</Option>\r\n            </Select>\r\n            <Col span={24}>\r\n                <div id=\"column_graph\" />\r\n            </Col> \r\n        </div>\r\n    )\r\n    \r\n    /**\r\n     * Sorts and returns the appropriate data\r\n     * @param {string} sortType - type of data requested to be returned \r\n     * @returns - Country name and either the number of cases, deaths, or recoveries\r\n     */\r\n    function getData(sortType) {\r\n        if (sortType === \"Sort by most cases\") { sortByCases(); }\r\n        if (sortType === \"Sort by most deaths\") { sortByDeaths(); }\r\n        if (sortType === \"Sort by most recoveries\") { sortByRecoveries(); }\r\n\r\n        const countries_cases = [\r\n            {\"Country\"  :COUNTRIES[0].Country,  \"Cases\"     :COUNTRIES[0].Cases,},\r\n            {\"Country\"  :COUNTRIES[1].Country,  \"Cases\"     :COUNTRIES[1].Cases},\r\n            {\"Country\"  :COUNTRIES[2].Country,  \"Cases\"     :COUNTRIES[2].Cases},\r\n            {\"Country\"  :COUNTRIES[3].Country,  \"Cases\"     :COUNTRIES[3].Cases},\r\n            {\"Country\"  :COUNTRIES[4].Country,  \"Cases\"     :COUNTRIES[4].Cases},\r\n            {\"Country\"  :COUNTRIES[5].Country,  \"Cases\"     :COUNTRIES[5].Cases},\r\n            {\"Country\"  :COUNTRIES[6].Country,  \"Cases\"     :COUNTRIES[6].Cases},\r\n            {\"Country\"  :COUNTRIES[7].Country,  \"Cases\"     :COUNTRIES[7].Cases},\r\n            {\"Country\"  :COUNTRIES[8].Country,  \"Cases\"     :COUNTRIES[8].Cases},\r\n            {\"Country\"  :COUNTRIES[9].Country,  \"Cases\"     :COUNTRIES[9].Cases},\r\n            {\"Country\"  :COUNTRIES[10].Country, \"Cases\"     :COUNTRIES[10].Cases},\r\n            {\"Country\"  :COUNTRIES[11].Country, \"Cases\"     :COUNTRIES[11].Cases},\r\n            {\"Country\"  :COUNTRIES[12].Country, \"Cases\"     :COUNTRIES[12].Cases},\r\n            {\"Country\"  :COUNTRIES[13].Country, \"Cases\"     :COUNTRIES[13].Cases},\r\n            {\"Country\"  :COUNTRIES[14].Country, \"Cases\"     :COUNTRIES[14].Cases},\r\n        ];\r\n        const countries_deaths = [\r\n            {\"Country\"  :COUNTRIES[0].Country,  \"Deaths\"    :COUNTRIES[0].TotalDeaths},  \r\n            {\"Country\"  :COUNTRIES[1].Country,  \"Deaths\"    :COUNTRIES[1].TotalDeaths},  \r\n            {\"Country\"  :COUNTRIES[2].Country,  \"Deaths\"    :COUNTRIES[2].TotalDeaths},  \r\n            {\"Country\"  :COUNTRIES[3].Country,  \"Deaths\"    :COUNTRIES[3].TotalDeaths},  \r\n            {\"Country\"  :COUNTRIES[4].Country,  \"Deaths\"    :COUNTRIES[4].TotalDeaths},  \r\n            {\"Country\"  :COUNTRIES[5].Country,  \"Deaths\"    :COUNTRIES[5].TotalDeaths},  \r\n            {\"Country\"  :COUNTRIES[6].Country,  \"Deaths\"    :COUNTRIES[6].TotalDeaths},  \r\n            {\"Country\"  :COUNTRIES[7].Country,  \"Deaths\"    :COUNTRIES[7].TotalDeaths},  \r\n            {\"Country\"  :COUNTRIES[8].Country,  \"Deaths\"    :COUNTRIES[8].TotalDeaths},  \r\n            {\"Country\"  :COUNTRIES[9].Country,  \"Deaths\"    :COUNTRIES[9].TotalDeaths},  \r\n            {\"Country\"  :COUNTRIES[10].Country, \"Deaths\"    :COUNTRIES[10].TotalDeaths},  \r\n            {\"Country\"  :COUNTRIES[11].Country, \"Deaths\"    :COUNTRIES[11].TotalDeaths},  \r\n            {\"Country\"  :COUNTRIES[12].Country, \"Deaths\"    :COUNTRIES[12].TotalDeaths},  \r\n            {\"Country\"  :COUNTRIES[13].Country, \"Deaths\"    :COUNTRIES[13].TotalDeaths},  \r\n            {\"Country\"  :COUNTRIES[14].Country, \"Deaths\"    :COUNTRIES[14].TotalDeaths},\r\n        ];\r\n        const countries_recoveries = [\r\n            {\"Country\"   :COUNTRIES[0].Country,  \"Recoveries\"   :COUNTRIES[0].TotalRecovered},\r\n            {\"Country\"   :COUNTRIES[1].Country,  \"Recoveries\"   :COUNTRIES[1].TotalRecovered},\r\n            {\"Country\"   :COUNTRIES[2].Country,  \"Recoveries\"   :COUNTRIES[2].TotalRecovered},\r\n            {\"Country\"   :COUNTRIES[3].Country,  \"Recoveries\"   :COUNTRIES[3].TotalRecovered},\r\n            {\"Country\"   :COUNTRIES[4].Country,  \"Recoveries\"   :COUNTRIES[4].TotalRecovered},\r\n            {\"Country\"   :COUNTRIES[5].Country,  \"Recoveries\"   :COUNTRIES[5].TotalRecovered},\r\n            {\"Country\"   :COUNTRIES[6].Country,  \"Recoveries\"   :COUNTRIES[6].TotalRecovered},\r\n            {\"Country\"   :COUNTRIES[7].Country,  \"Recoveries\"   :COUNTRIES[7].TotalRecovered},\r\n            {\"Country\"   :COUNTRIES[8].Country,  \"Recoveries\"   :COUNTRIES[8].TotalRecovered},\r\n            {\"Country\"   :COUNTRIES[9].Country,  \"Recoveries\"   :COUNTRIES[9].TotalRecovered},\r\n            {\"Country\"   :COUNTRIES[10].Country, \"Recoveries\"   :COUNTRIES[10].TotalRecovered},\r\n            {\"Country\"   :COUNTRIES[11].Country, \"Recoveries\"   :COUNTRIES[11].TotalRecovered},\r\n            {\"Country\"   :COUNTRIES[12].Country, \"Recoveries\"   :COUNTRIES[12].TotalRecovered},\r\n            {\"Country\"   :COUNTRIES[13].Country, \"Recoveries\"   :COUNTRIES[13].TotalRecovered},\r\n            {\"Country\"   :COUNTRIES[14].Country, \"Recoveries\"   :COUNTRIES[14].TotalRecovered},\r\n        ];\r\n\r\n        if (sortType === \"Sort by most cases\") { return countries_cases; }\r\n        if (sortType === \"Sort by most deaths\") { return countries_deaths }\r\n        if (sortType === \"Sort by most recoveries\") { return countries_recoveries; }\r\n    }\r\n}\r\n\r\nexport default TopCountries\r\n","import React from 'react'\r\n\r\nimport Statistic from 'antd/lib/statistic';\r\nimport Card from 'antd/lib/card';\r\nimport Col from 'antd/lib/col';\r\n\r\n/**\r\n * Card display for each category\r\n * @param {String} title - title of the category\r\n * @param {Int} value - Number value of the category\r\n * @returns \r\n */\r\nconst DisplayCard = ({title, value}) => {\r\n    return (\r\n        <Col xs={24} sm={12} md={8} lg={8} xl={8}>\r\n            <Card\r\n            hoverable={true}\r\n            >\r\n                <Statistic\r\n                    title={title}\r\n                    value={value}\r\n                    // valueStyle={{ color: '#3f8600' }}\r\n                />\r\n            </Card>\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default DisplayCard\r\n","import React from 'react'\r\nimport { useQuery, gql } from '@apollo/client'\r\nimport DisplayCard from './DisplayCard'\r\n\r\nimport Typography from 'antd/lib/typography'\r\nimport Spin from 'antd/lib/spin';\r\nimport Row from 'antd/lib/row';\r\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined';\r\n\r\n/** Queries all the global stats */\r\nconst GLOBAL_QUERY = gql`\r\n    query GetGlobal {\r\n        summary {\r\n            Global {\r\n                NewConfirmed\r\n                TotalConfirmed\r\n                NewDeaths\r\n                TotalDeaths\r\n                NewRecovered\r\n                TotalRecovered                                                                                                                 \r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n/** Contains the loading icon */\r\nconst loadingIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\n/** Text component of antd's Typograph */\r\nconst { Text } = Typography;\r\n\r\n/**\r\n * Displays the card display for Worldwide stats\r\n * @param {Array} titles - Strings array containing each category name\r\n * @returns \r\n */\r\nconst Global = ({titles}) => {\r\n    const { loading, error, data } = useQuery(GLOBAL_QUERY);\r\n    \r\n    // API QUERY is loading\r\n    if (loading) return <Row justify=\"center\"><Spin indicator={loadingIcon} /></Row>     \r\n    // API QUERY failed to load or fetch\r\n    if (error) return   <Text type=\"danger\">Failed to fetch API.</Text>;\r\n    \r\n    /** Store each QUERY */\r\n    const { NewConfirmed, TotalConfirmed, NewDeaths, TotalDeaths,\r\n        NewRecovered, TotalRecovered } = data.summary.Global;\r\n\r\n    return (\r\n        <div className=\"card-container\">\r\n            <Row gutter={[16, 16]}>\r\n                <DisplayCard\r\n                    title={titles[0]}\r\n                    value={NewConfirmed}\r\n                />\r\n                <DisplayCard\r\n                    title={titles[1]}\r\n                    value={TotalConfirmed}\r\n                />\r\n                <DisplayCard\r\n                    title={titles[2]}\r\n                    value={NewDeaths}\r\n                />\r\n                <DisplayCard\r\n                    title={titles[3]}\r\n                    value={TotalDeaths}\r\n                />\r\n                <DisplayCard\r\n                    title={titles[4]}\r\n                    value={NewRecovered}\r\n                />\r\n                <DisplayCard\r\n                    title={titles[5]}\r\n                    value={TotalRecovered}\r\n                />\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Global","import React from 'react'\r\nimport Row from 'antd/lib/row';\r\nimport DisplayCard from './DisplayCard'\r\n\r\n/**\r\n * Displays the country 'Summary' stats\r\n * @param {Array} COUNTRIES - Array of all the countries in the API of 'summary'\r\n * @param {String} COUNTRY_SELECT - Country selected by the user\r\n * @param {Array} titles - Strings array containing each category name\r\n * @returns \r\n */\r\nconst ByCountry = ({COUNTRIES, COUNTRY_SELECT, titles}) => {\r\n    /** New cases for the country */\r\n    let new_cases;\r\n    /** Total cases for the country */\r\n    let total_cases;\r\n    /** Recent deaths for the country */\r\n    let new_deaths;\r\n    /** Total deaths for the country */\r\n    let total_deaths;\r\n    /** Recent recoveries for the country */\r\n    let new_recoveries;\r\n    /** Total recoveries for the country */\r\n    let total_recoveries;\r\n\r\n    // Find country selected by user and assign data to local variables\r\n    for (let x = 0; x < COUNTRIES.length; x++) {\r\n        if (COUNTRIES[x].Country === COUNTRY_SELECT) {\r\n            new_cases = COUNTRIES[x].NewCases;\r\n            total_cases = COUNTRIES[x].Cases;\r\n            new_deaths = COUNTRIES[x].RecentDeaths;\r\n            total_deaths = COUNTRIES[x].TotalDeaths;\r\n            new_recoveries = COUNTRIES[x].NewRecovered;\r\n            total_recoveries = COUNTRIES[x].TotalRecovered;\r\n\r\n            break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"card-container\">\r\n            <Row gutter={[16, 16]}>\r\n            <DisplayCard\r\n                    title={titles[0]}\r\n                    value={new_cases}\r\n                />\r\n            <DisplayCard\r\n                title={titles[1]}\r\n                value={total_cases}\r\n            />\r\n            <DisplayCard\r\n                title={titles[2]}\r\n                value={new_deaths}\r\n            />\r\n            <DisplayCard\r\n                title={titles[3]}\r\n                value={total_deaths}\r\n            />\r\n            <DisplayCard\r\n                title={titles[4]}\r\n                value={new_recoveries}\r\n            />\r\n            <DisplayCard\r\n                title={titles[5]}\r\n                value={total_recoveries}\r\n            />\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ByCountry\r\n","import React, { useState } from 'react'\r\nimport Global from './Global'\r\nimport ByCountry from './ByCountry'\r\n\r\nimport Select from 'antd/lib/select'\r\n\r\nconst { Option } = Select;\r\n\r\n/**\r\n * Allows the user to select the option to view: Either worldwide or a country.\r\n * @param {Array} COUNTRIES - Array containing the QUERY information of <Countries>\r\n * @returns \r\n */\r\nconst SelectStat = ({COUNTRIES}) => {\r\n    /** Holds the current 'Select' tag */\r\n    const [dataSelect, setSelect] = useState(\"Worldwide\");\r\n    /** Holds all the options (countries) for the select tag */\r\n    const options = [];\r\n    /** Titles for cards - used in <Global> and <ByCountry> */\r\n    const titles = [\r\n        \"New Cases Confirmed\", \"Total Cases Confirmed\", \"Recent Deaths\",\r\n        \"Total Deaths\", \"Recent Recoveries\", \"Total Recoveries\"\r\n    ]\r\n\r\n    // Add options dynamically\r\n    options.push(<Option key={0} value=\"Worldwide\">Worldwide</Option>)  \r\n    for (let x = 1; x < COUNTRIES.length; x++) {\r\n        options.push(<Option key={x} value={COUNTRIES[x].Country}>{COUNTRIES[x].Country}</Option>)\r\n    }\r\n\r\n    /**\r\n     * Returns the proper component\r\n     * @returns - Returns <Global> if option is \"Worldwide\", otherwise return <ByCountry>\r\n     */\r\n    function DisplayData() {\r\n        if (dataSelect === \"Worldwide\") {\r\n            return <Global titles={titles}/>\r\n        } else {\r\n            return <ByCountry COUNTRIES={COUNTRIES} COUNTRY_SELECT={dataSelect} titles={titles}/>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"select-container\">\r\n           <Select\r\n            style={{ width: 225 }}\r\n            showSearch\r\n            value={dataSelect}\r\n            optionFilterProp=\"children\"\r\n            onChange={(e) => {\r\n                setSelect(e);}}\r\n            filterOption={(input, option) =>\r\n                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n              }\r\n           >\r\n               {options}\r\n           </Select> \r\n           <DisplayData />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectStat\r\n","import React from 'react'\r\nimport { gql, useQuery } from '@apollo/client'\r\nimport TopCountries from './TopCountries'\r\nimport SummaryStat from './SummaryStat'\r\n\r\nimport Typography from 'antd/lib/typography'\r\nimport Spin from 'antd/lib/spin';\r\nimport Row from 'antd/lib/row';\r\nimport message from 'antd/lib/message'\r\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined';\r\n\r\n/** Queries all the country stats */\r\nconst COUNTRY_QUERY = gql`\r\n    query GetCountries {\r\n        summary {\r\n            Countries {\r\n                ID\r\n                Country\r\n                NewConfirmed\r\n                TotalConfirmed\r\n                NewDeaths\r\n                TotalDeaths\r\n                NewRecovered\r\n                TotalRecovered\r\n                Date         \r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n/** Contains the loading icon */\r\nconst loadingIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\n/** Text component of antd's Typograph */\r\nconst { Text } = Typography;\r\n\r\n/** Error message when API QUERY fetch fails */\r\nconst msgError = () => {\r\n    message.error('API may be down. Please refresh the web page in 2-3 minutes.');\r\n}\r\n\r\n/**\r\n * Returns the appropriate component and passes the QUERY.\r\n * @param {Int} rtnValue - either 0 or 1\r\n * @param {int} TOP_COUNTRY_RTN - value of 1\r\n * @returns \r\n */\r\nconst Countries = ({rtnValue, TOP_COUNTRY_RTN}) => {  \r\n    const { loading, error, data } = useQuery(COUNTRY_QUERY);\r\n    const COUNTRIES = []\r\n    let COUNTIRES_COPY = []\r\n\r\n    // API QUERY is loading\r\n    if (loading) return <Row justify=\"center\"><Spin indicator={loadingIcon} /></Row>  \r\n    // API QUERY failed to load or fetch\r\n    if (error) return <><Text type=\"danger\">Failed to fetch API.</Text>; {msgError()} </>\r\n    \r\n    /**\r\n     * Adds all countries to the local JSON 'topCountries'\r\n     * @param {string} ID - ID of the country from the COVID-19 API\r\n     * @param {string} Country - Country name\r\n     * @param {int} TotalConfirmed  - Number of total COVID-19 cases\r\n     */\r\n    const addCountry = (ID, Country, NewConfirmed, TotalConfirmed, NewDeaths,\r\n        TotalDeaths, NewRecovered, TotalRecovered, Date) => {\r\n        COUNTRIES.push({\r\n            \"ID\":ID, \"Country\":Country, \"NewCases\":NewConfirmed, \"Cases\":TotalConfirmed, \"RecentDeaths\":NewDeaths,\r\n            \"TotalDeaths\":TotalDeaths, \"NewRecovered\":NewRecovered, \"TotalRecovered\":TotalRecovered,\r\n            \"Date\":Date       \r\n        })\r\n    }\r\n    \r\n    /** Maps through the QUERY and calls the function addCountry() */\r\n    data.summary.Countries.map(( \r\n        {ID, Country, NewConfirmed, TotalConfirmed, NewDeaths,\r\n        TotalDeaths, NewRecovered, TotalRecovered, Date }) => (\r\n            addCountry(ID, Country, NewConfirmed, TotalConfirmed, NewDeaths,\r\n                TotalDeaths, NewRecovered, TotalRecovered, Date)\r\n        ));\r\n\r\n    // Copy COUNTRIES array into copy    \r\n    COUNTIRES_COPY = COUNTRIES.slice();\r\n\r\n    /**\r\n     * Returns the proper component. Either the sorted chart or the summary data.\r\n     * @param {rtnValue} props - 0 = TopCountries, 1 = ByCountry\r\n     * @returns - The proper chart to display\r\n     */\r\n    function ComponentDisplay(props) {\r\n        const value = props.rtnValue;\r\n        if (value === TOP_COUNTRY_RTN) {\r\n            return <TopCountries COUNTRIES={COUNTRIES} />\r\n        } else {\r\n            return <SummaryStat COUNTRIES={COUNTIRES_COPY}/>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ComponentDisplay rtnValue={rtnValue} />\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default Countries\r\n","import React from 'react'\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\nimport './App.less';\n\nimport Typography from 'antd/lib/typography'\nimport Countries from './components/Countries'\nimport GithubOutlined from '@ant-design/icons/GithubOutlined'\nimport HeartFilled from '@ant-design/icons/HeartFilled'\n\nconst { Title, Text } = Typography;\n\n/** Create Client */\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  /** CONSTANT of the return value that represents <TopCountry>. Used in <Countries>. */\n  const TOP_COUNTRY_RTN = 0;\n  /** CONSTANT of the return value that represents <SelectStat>. Used in <Countries>. */\n  const SUMMARY_RTN = 1;\n\n  return (\n    <ApolloProvider  client={client}>\n      {/* Header */}\n      <div className=\"header-container text-center\">\n          <Title level={1}>COVID-19 Tracker</Title>\n          <p>A real-time COVID-19 tracker using the&nbsp;\n            <a \n            href=\"https://documenter.getpostman.com/view/10808728/SzS8rjbc#e831c268-9da1-4d86-8b5a-8d7f61910af8\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >COVID19 API</a></p>\n      </div>\n      {/* Summary Stats */}\n      <div className=\"summary-container\">\n        <div className=\"container\">\n          <Title level={1} className=\"header-section\">Summary Data</Title>\n          <Countries \n              rtnValue={SUMMARY_RTN} \n              TOP_COUNTRY_RTN={TOP_COUNTRY_RTN}\n          />\n        </div>\n      </div>\n      {/* Sorted Stats */}\n      <div className=\"topCountries-container\">\n        <div className=\"container\">\n          <Title level={1} className=\"header-section\">Charted Data</Title>\n          <Countries \n            rtnValue={TOP_COUNTRY_RTN} \n            TOP_COUNTRY_RTN={TOP_COUNTRY_RTN}\n          />\n        </div>\n      </div>\n      {/* Footer */}\n      <div className=\"footer-container\">\n        <div className=\"container\">\n          <a \n           href=\"https://github.com/jonahlouis4/COVID19-Tracker\"\n           target=\"_blank\"\n           rel=\"noopener noreferrer\"\n          >\n            <GithubOutlined style={{color:'#bfbfbf'}}/>\n          </a>\n          <Text \n          style={{color:'#bfbfbf',float:'right'}}\n          className=\"text-right\"\n          >\n            &#169;2021 Made with <HeartFilled style={{color:'red'}}/> by&nbsp; \n            <a \n              href=\"https://www.jonahlouis.ca/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n             Jonah Louis\n            </a>\n          </Text>\n        </div>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}